1. Native Components
리액트 네이티브는 div, h2 같은 태그를 사용하지 못한다.
네이티브 기기는 DOM이 존재하지 않기 떄문에 html 요소를 지원하지 않는다.

네이티브에서 내장된 컴포넌트와 이들이 모여서 갖춰진 사용자 컴포넌트로 UI를 만든다.

네이티브는 CSS가 존재하지 않는다.
대신 인라인 스타일이나 styleSheet 객체를 사용한다.

APP.js 파일 내의 APP 컴포넌트는 앱에 렌더링 되는 루트 컴포넌트이다.
=> SPA이기 떄문에 APP의 최종 root인 트리 형태를 갖춰야 한다.

=> Ios, android는 Web이 아니기 떄문에 기존의 HTML, CSS을 사용할 수 없다. native만의 방식을 사용해야 한다.


2. Core Components
2-1. View tag => 컨텐츠를 담는 상자나 컨테이너 구축에 사용되는 tag
(view가 컴포넌트를 담는데 사용하는 유일한 컨테이너 컴포넌트이다. (section이나 main 같은 것이 없다.))

2-2. Text tag => 네이티브에서 문자를 표현하기 위해서는 Text tag에 넣어줘야 한다.

*** Core-Components를 가져올 때는 react-native 패키지에서 import 해야 한다.


3. Native Styling
Native 프로젝트는 웹을 target하여 UI를 개발하는 것이 아니라 안드로이드, ios를 기준으로 개발하는 것이다.
*** 스타일 상속이 없다.

3-1. inline Styling 
=> 몇몇 컴포넌트들은 style이라는 프로퍼티를 가지고 있다. style 프로퍼티에 css 객체를 주면 적용된다.

3-2. StyleSheet object
=> 해당 객체를 사용하면 자동완성이나 코드 검증을 해주기 때문에 편리하다.
react-native package에서 StyleSheet 객체를 import => StyleSheet.create 메서드 호출 => 인수로 객체를 받는다.
=> CSS 프로퍼티를 작성 => core-components의 styles에 할당
=> 숫자는 그냥 사용해도 되지만 나머지 값들은 ''("")에 묶어서 사용해야 한다.


4. Native flex
4-1. view tag는 flex를 자동으로 사용한다. (defualt => flexDirection : column)
4-2. flex property => flex : n(n만큼 공간을 차지한다. 부모가 1, 자식1이 1, 자식2가 4면 자식 1은 1/5을 
갖고 자식 2는 4/5를 갖는다.)
4-3. 나머지는 css flex와 같다.


5. Native Event
5-1. TextInput tag는 onChangeText 이벤트 리스너 속성을 통해 입력값을 받아올 수 있다. 이 떄 연결된 함수에게
자동으로 입력값을 전달해준다.

5-2. Button tag는 onPress === onClick

5-3. React Event 처리와 동일하다. => 이전 값에 기대어 처리하는 경우 setFunc의 콜백함수처리


6. ios vs android 스타일링의 차이점
React-Native의 장점은 여러 분할 코드를 작성하지 않고 여러 플랫폼에서 앱이 돌아가게 하는 것이다.
그러나 ios와 android의 특성에 따라 분할 코드를 작성할 필요도 있다.

borderRadius의 경우 Text tag에 styles로 적용하게 되면 ios의 경우 무시된다.
=> ios라 그런것이다.
=> 공식문서를 확인하거나 래퍼 컴포넌트로 감싸면 해결된다.

*** android와 IOS의 style이 적용 상이 => 래퍼 컴포넌트 view 써보기


7. ScrollView
ScrollView tag는 해당 영역에서 요소들이 height을 넘어가면 스크롤 효과를 주는 core-component이다.

7-1. ScrollView는 flex로 공간을 차지할 떄 움직임이 다르기 떄문에 view로 감싸서 flex처리를 해야한다.
7-2. ScrollView는 IOS나 android에 따라 사용할 수 있는 프로퍼티나 default 값이 다르기 떄문에 개발시 고려해야 한다.
7-3. ScrollView는 렌더링이 트리거되면 모든걸 렌더링하기 떄문에 map을 주로 사용하여 자식들을 표현한다.
7-4. ScrollView는 모든 자식 항목을 렌더링한다. (모든 항목이 보이지 않더라도 렌더링을 해버린다.)
=> 목록이 길면 성능 issue가 발생할 수 있다.






















