1. Styling
1-1. Image가 uri로 표현될 떄 width, height을 지정하지 않으면 image가 나타나지 않는다.
1-2. Text style => border 설정이 불가능하다.

1-3. center 정렬 방법
=> 덮는 View를 하나 만들고 align-item, justify-content center 처리한다.
(view로 덮어버린다? => view는 자동으로 flex 처리 + width 100% 가지는 속성을 이용한 것이다.)

1-4. ScrollView, FlatList margin-bottom
scrollView가 전체 페이지를 바라보고 있기 떄문에 scrollview 안쪽을 컨텐츠를 모두 덮는 view에 margin-bottom을 주면 해결된다.


2. header button plus
option={{
    headerRight : ()=>{
        return <Button title=".." onPress={...}><Button>
    }
}}
=> header에 title아 아닌 버튼이나 다른 컴포넌트을 렌더링시킬 수 있다.
=> headerRight(left)의 함수의 return 값은 컴포넌트여야 한다.
=> 상호작용하고 싶다면 컴포넌트의 navigation.setOptions({headerRight : ()=>{return JSX}}) + useLayoutEffect를 사용


3. 헤더에 아이콘 버튼 추가하기
3-1. Pressable + react-native의 내장된 icon 기능을 합쳐서 custom 컴포넌트로 아이콘 버튼 생성
3-2. props을 받아서 icon의 속성, pressable의 onPress을 처리한다.


4. Drawer navigator
정의 : 앱에 측면 드로어를 추가하는 내비게이터이다.
1. npm install @react-navigation/stack
2. npx expo install react-native-gesture-handler
3. npm install @react-navigation/drawer
4. npx expo install react-native-gesture-handler react-native-reanimated
=> 설정

사용방법은 Stack 내비게이션과 동일하다.
1. NavigationContainer을 생성한다.
2. createDrawerNavigator을 호출해서 변수에 객체를 할당한다.
3. Drawer.Navigator(부모)/ Drawer.Screen(자식)으로 설정
4. Screen name, component, options etc..


5. Drawer Navi +
5-1. RN-Navigation Docs에 많은 정보가 존재한다.

5-2. screen에 등록된 컴포넌트는 route, navigation을 props로 받는다.
=> Stack과 동일하지만 navigation.toggleDrawer()를 통해 드로어를 열 수 있는 기능이 존재한다.


6. 하단 탭 추가, 구성 & 사용하기
설정 => npm install @react-navigation/bottom-tabs

사용방법
1. import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
2. const Tab = createBottomTabNavigator();
3. 내비게이션 컨테이너 안에 tab.navigator, tab.Screen을 설정하면 된다.
4. Icon 설정은 Stack, Drawer, Tab 모두 사용하는 핵심 프로퍼티이다.


7. 내비게이터 중첩
7-1. 두 개의 내비게이션 create 함수를 호출하여 변수에 할당한다.

7-2. Stack, Drawer가 존재한다면 Stack는 Navigation을 구현하고 Drawer를 function return 값에 구현한다.

7-3. Stack의 component는 Drawer의 리턴 값으로 구성한다.

7-4 header가 두 개이기 떄문에 headerShown을 통해서 하나를 숨긴다.








