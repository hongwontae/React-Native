1. header default and background styling
<Stack.Screen name="..." component={...} options={
    ...
} /> options 객체를 통해 헤더 설정 + 기타 설정이 가능하다.

options={
    title: "All Category", => 헤더의 제목, title이 설정되면 name은 navi의 역할만 한다.
    headerTitleAlign: "center", => text-align
    headerStyle: { backgroundColor: "#351401" }, 
    headerTintColor: "white", => color
    contentStyle: { backgroundColor: "#3f2f25" }, => content의 전체 style
}

options를 하나의 screen에 고정시키지 않고 여러 screen에도 사용하고 싶다면 Stack.Navigator의 screenOptions={{...}}에서
적용하면 된다.


2. 내비게이션 옵션 동적으로 설정
2-1. Screen options={()=>{}}
=> 함수를 줄 수 있다. navigate 될 떄 실행된다.
=> {({route, navigation})=>{
    const data = route.params.key1
    return{
        title : data,
    }
}} => 이렇게 동적으로 설정할 수 있다.

2-2. navigation.setOptions({
    title : data,
    ...
})
=> Screen으로 등록된 컴포넌트들은 route, navigation을 받는데 navigation.setOptions({})를 통해 options을 동적으로 설정할 수 있다.
=> 다만 이렇게 설정할 떄는 useEffect, useLayoutEffect와 함께 사용해야한다.
=> 컴포넌트가 실행될 떄 options는 부수효과이기 떄문이다. (header는 해당 컴포넌트의 JSX가 아니다.)


*** useLayoutEffect() => useEffect와 마찬가지로 컴포넌트가 렌더링된 이후에 useLayoutEffect을 실행한다.
다만 useEffect는 rendering + paint 이후에 컴포넌트 재실행/ useLayoutEffect는 rendering 이후에 paint 이전에 실행된다. 




























1. image vs imageBackground
2. 둘의 width, height 적용방법
3. shadow의 ios, android 차이점
4. overflow : hidden 플랫폼마다의 적용방식
