1. image-picker
1-1. 사진첩을 열거나 카메라를 여는 API입니다.
1-2. launchCameraAsync를 통해 카메라에 접근할 수 있습니다

1-3. import {PermissionStatus} from 'expo-image-picker'
=> PermissionStatus.DENIED : 'denied' 권한 거부 상태
=> PermissionStatus.GRANTED : 'granted' 권한 승인 상태
=> PermissionStatus.UNDETERMINED  : 'undetermined' 권한 모름 상태

1-4. const [cameraPermissionInfo, requestPermission] = useCameraPermissions();
=> cameraPermissionInfo.status를 통해 해당 기기의 카메라 접근 권한을 알 수 있습니다.

=> const permission =  async requestPermission()를 통해 카메라 접근 권한 요청할 수 있습니다.
=> permission.granted를 통해 권한 승인 여부를 boolean으로 알 수 있습니다.

1-5. const image = await launchCameraAsync
=> uri를 통해 이미지를 미리보기를 구현할수 있습니다.
=> return 값인 image.assets[0].uri를 통해 uri에 접근할 수 있고 state를 통해 저장하여 조건부로 렌더링할 수 있습니다.

=> IOS의 경우 권한을 물어보는 자동화가 없기 때문에 권한을 체크하여 권한 요청을 하는 코드가 필요합니다.


2. 권한
2-1. 휴대폰에 다른 영역에 접근할 떄는 사용자의 권한 승인이 필요합니다.
2-2. 예를 들어, 카메라나 사진첩에 접근할 떄의 권한, 어떤 리스소 접근 권한을 승인받아야 합니다.


3. expo-location
3-1. npx expo install expo-location
3-2. image-picker API와 동일하게 권한 체크하고 권한 요청을 하는 것이 좋습니다.

3-3. const [locationInfo, requestPermission] = useForegroundPermissions();
=> locationInfo는 권한 상태나 만료 등을 알 수 있는 객체입니다.
=> requestPermission는 권한 요청하는 비동기 함수입니다.
=> image-picker hook과 동일합니다.

3-4. await getCurrentPositionAsync()
=> 이를 통해서 사용자의 위치를 얻을 수 있습니다.





