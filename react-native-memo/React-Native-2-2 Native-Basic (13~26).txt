1. FlatList
ScrollView와 비슷한 역할을 하지만 사용자가 화면을 스크롤을 하여 접근했을 떄 로딩 및 렌더링된다.
=> Flat은 화면상 보이는 영역만 로딩 및 렌더링한다.

1-1. FlatList는 내부 자식 컨텐츠를 내장 프로퍼티를 이용해 렌더링한다.
1-2. data={...} data props를 통해 렌더링할 data를 가져온다.
1-2. renderItem={(data)=>{return <View><Text>{data.data}</Text></View>}} 렌더링한다. 
=> 스크롤을 시작하면 renderItem이 다시 실행되어 data를 가져온다.
1-3. data에 key라는 props가 존재하면 자동적으로 사용된다.
1-4. key라는 이름의 props이 존재하지 않으면 keyExtractor 내장 프로퍼티를 이용한다. (key 할당 프로퍼티)
=> keyExtractor((item,index)=>{return item.id}) => item.id가 key로써 사용된다. 


2. react-native Structure
상태관리는 상위 컴포넌트에서 하지만 상태변화함수의 트리거는 하위 컴포넌트에서 발생시키고 싶다.
=> props를 이용해서 function을 넘기고 하위 컴포넌트에서 사용한다. => 상위 컴포넌트에서 사용된다.


3. Pressable core-components
요소를 터치할 떄의 이벤트를 걸기 위해서는 Pressable 컴포넌트를 사용하여 감싸야 한다.
이후 onPress 내장 프로퍼티를 사용해서 이벤트를 트리거한다.


4. react-native item delete (delete-Logic)
setFunc의 콜백함수, filter, !로직을 혼합하여 delete 로직을 생성한다.


5. Android 물결 효과 추가하기 & IOS 대안
pressable components의 android_ripple 프로퍼티를 통해 item 터치 시 효과를 간단하게 추가할 수 있다.

IOS는 pressable의 style 속성을 통해 전달해줘야 한다.
style={({pressed})=>{body....}} => pressed가 터치가 되었을 떄 body를 실행시킨다.

=> android_ripple, IOS style을 동시에 사용하면 효과가 겹치게 된다. => 고려해라


6. Modal
<Modal> core-component을 사용한다.
=> RN의 모달이 visible={true} 상태일 떄는 화면을 가득채운다. visible={false}면 내려간다.
=> animationType을 통해 animation을 구현할 수 있다.
=> 상태 관리와 props를 통해 모달의 true, false를 구현한다.


7. Image
image를 다루는 core-component이다.
=> source 프로퍼티에 require('path')을 통해 이미지를 가져온다.
=> style 프로퍼티로 이미지를 조정한다.
=> img tag의 속성과 비슷해서 width와 height % 제외 단위 설정 가능


8. app.json
"backgroundColor" : "#1e085a" 
=> expo 파일에 프로퍼티를 추가하면 모든 배경화면 색상 default을 줄 수 있다.



























