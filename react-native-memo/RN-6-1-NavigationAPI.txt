1. Styling
1-1. pressable의 style의 함수는 ios나 android 모두에게 영향을 미칩니다.
1-2. ios의 boxShadow는 elevation의 영향을 받지 않는다. android는 모든 box-shadow의 영향을 받는다.


1-4. RN은 마진 상쇄가 없습니다.
1-5. ios의 그림자 프로퍼티는 background가 있어야 나타납니다.


2. 설정
2-1. npm install @react-navigation/native
2-2. npm install react-native-screens react-native-safe-area-context
2-3. npm install @react-navigation/native-stack


3. React Navigation
3-1. React Navigation은 컴포넌트 기반 라이브러리이다.

3-2. NavigationContainer => navigation의 기능을 사용할 모든 컴포넌트들을 덮는 컴포넌트
(import {NavigationContainer} from '@react-navigation/native';)

3-3. const Stack = createNativeStackNavigator() 
=> 함수를 호출하면 3개의 navi 기능을 도와주는 프로퍼티가 할당된다.
(import {createNativeStackNavigator} from '@react-navigation/native-stack';)

3-4. <Stack.Navigator><Stack.Navigator/>
=> <Stack.Screen>을 덮는 컴포넌트

3-5. <Stack.screen>
=> navi 기능을 사용할 컴포넌트를 등록하는 컴포넌트
=> name : 등록할 컴포넌트의 별칭
=> component : 등록할 컴포넌트

3-6. Screen으로 등록된 컴포넌트는 자동적으로 navigation이라는 props을 받는다.
=> navigation.navigate('name')을 통해 화면이동을 트리거 할 수 있다.

3-7. screen으로 등록이 되어있고 navigate('screen-name', {key : value, key2: value})에 대상이라면
props route을 통해 route.params.key를 통해 data에 접근할 수 있다.
(route는 navigaiton처럼 screen으로 등록되면 자동으로 가져오는 props이다.)

3-8. 위의 기능이 마련되면 뒤로 가기 기능이 자동으로 추가된다.


4. 기본 설정 
Stack.Navigator의 첫 번쨰 Stack.Screen이 초기 화면이 된다.


5. useNavigation Hook
import {useNavigation} from '@react-navigation/native'
const navigation = useNavigation(); => screen으로 등록되지 않은 컴포넌트에서 navigate을 사용할 떄 사용하는 훅이다.


6. 화면 간 데이터 전달을 위해 라우트 매개변수로 작업하기
navigation.navigate('screen-name', {object...})
=> 두 번쟤 인자를 통해서 params를 보낼 수 있다.

navigate된 컴포넌트는 자동적으로 props를 통해 route을 받을 수 있다.
해당 route props는 route.params.objKey를 통해서 보낸 객체에 접근할 수 있다.

또한 useRoute를 통해서 params을 받을 수 있다.
const route = useRoute();
route.params.key를 통해 접근 가능
=> screen에 등록되지 않은 컴포넌트는 route 객체가 자동적으로 들어오지 않기에 useRoute을 사용한다.
=> 페이지가 아닌 페이지의 하위 컴포넌트들도 useRoute를 통해 navigate로 데이터를 받을 수 있습니다.
=> 그리고 route props 대신 useRoute을 사용해도 된다.


7. 음식 디스플레이하기
route를 통해 가져온 params, arr.filter를 통해 데이터를 찾고 flatList를 사용해서 렌더링한다.



